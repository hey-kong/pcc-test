'''
Author: fuchy@stu.pku.edu.cn
Description: Prepare data for traning and testing.
             *.mat is generated by dataPrepare from *.ply
             *.mat data structure cell{N*4} :
                N: point clouds number; N=1 in '*.mat'
                    {
                        [TreePoints*K*C] Octree data sequence generated from PQ (Quantized point cloud): N*K*C [n,7,6] array
                                         N[n treepoints]  K[7 ancestors]   C[oct code,level,octant,position(xyz)]
                4:      {Location} Original geometric coordinate P (n*3)
                        {qs,offset,Lmax,name} side information; Quantized point cloud PQ = (P-offset)/qs; The depth of PQ; The name of P (point cloud)
                    }
All rights reserved.
'''
import glob
from Preparedata.data import dataPrepare
from networkTool import CPrintl
def makedFile(dir):
    fileList = sorted(glob.glob(dir))
    return fileList
if __name__=="__main__":

#####For KITTI######
    oriDir = '../datasets/semanticKITTI/dataset/sequences/'
    outDir = './train/lidar/train/'
    ptNamePrefix = 'Kitti_'

    printl = CPrintl('Preparedata/makedFileLidar.log')
    makeFileList = makedFile(outDir+'*.mat')
    for folder in range(0, 11): # kitti folder, 00-10/11-21 folders for training/testing.
        folder = '{:02d}'.format(folder)
        fileList = sorted(glob.glob(oriDir+folder+'/velodyne/*.bin'))
        for n, file in enumerate(fileList):
            fileName = folder+file.split('/')[-1][:-4]
            dataName = outDir+'Kitti_'+fileName+'.mat'
            if dataName in makeFileList:   
                print(dataName,'maked!')
                continue
            qlevel = 12
            dataPrepare(file,saveMatDir=outDir,ptNamePrefix=ptNamePrefix+folder,offset='min',qs=2/(2**qlevel-1),normalize=True)
            if n%10==0:
                printl(dataName)